Общее:
В результате каждого события на сервере генерируется массив обновлений который будет отправляться всем пользователям, которые должны быть уведомлены о произошедшем событии и его последствиях.
В общем виде массив обновлений должен содержать следуюшую информцию:
[
	{"type":string,"timestamp":int,"data":{...}},
	...
]
Описание:
timestamp: int(unix timestamp), время события
params: object, объект содержащий данные о произошедшем событии (будет описан ниже в зависимости от произошедшего события)
type: sting(int?): тип произошедшего события: 
	"update" - обновление поля в данных. Пример: пользователю начислили 10 монет, 
	"notification" - отображение уведомления в верхнем правом углу. Пример: уведомить пользователя о совершении продажи, 
	"modal" - отображение полноэкранного уведомления. Пример: уведомить пользователя о получении нового уровня, 
	"error" - ошибка в процессе выполнения логики - отображается так же как и нотификейшн Пример: недостаточно денег для принятия челленжда

update.data:
name: string, имя структуры которую необходимо обновить (challenges, news, sales, profile, rating, config)
type: string, тип обновления (add, delete, update)
obj: object, соответствуюший объект который будет обновлен.
Пример: "data":{"name":"sales","type":"add","obj":{"id":13,"timestamp":1500649789,"product":{"id":1}}} - 
обновит объект sales на фронтенде добавив в него еще одну запись с id = 13

notification.data:
type: string, тип уведомления, влияет на цвет попапа и на его картинку, поддерживаемые типы: success, error, warning
text: string, текст уведомления, содержит строку для последующего перевода
params: object, объект содержащий динамические параметры, необходимые для отображения текста нотификейшена

modal.data:
type: string, тип модала, влияет на выбор темплейта для его отображения. поддерживаемые типы:  win, levelup
params: object, объект содержащий динамические параметры, необходимые для отображения в окне модала

error.data:
text: текст ошибки - содержит строку для последующего перевода
---------------------------------------------------------------------------------------------------------
-------
ЛОГИКА:
*каждое обновление данных должно формировать событие типа "update" в массив обновлений
-------
Запрос:
acceptChallenge
Параметры:
userId
challengeId
Проверки:
Время окончания челленжда (challenge.endDate) не меньше текущего момента
Текущий пользователь находится в списке пользователей подписаных на данный челлендж (challenge.participants)
Статус челленджа для данного пользователя == "новый" (challenge.participants[profile.id].status == 1)
У пользователя достаточно монет для начала челленжда (profile.coins >= challenge.fee)
Логика:
Списать количество монет соответствующее стоимости челленджа
Изменить статус челленджа для данного пользователя с 1 (новый) на 0 (принятый)
Изменить дату принятия челленджа для данного пользователя (acceptDate) на текущий unix timestamp
Уведомить всех остальных пользователей об появлении новости "пользователь принял челлендж"
---------------------------------------------------------------------------------------------------------

Запрос:
addSale
Параметры:
userId
productId
Проверки:
Пользователь существует
Проданный товар существует
Логика:
Добавить продажу в данные пользователя
Добавить пользователю соответствующее его уровню количество поинтов за продажу
Обновить статистику пользователя
Отправить пользователю нотификейшн о новой продаже
Проветить, не нужно ли выдать пользователю новый бейдж
Проверить все челленжди пользователя. 
	Если в открытых челленджах есть такие, в которых содержиться проданный товар (id in products) и такой челлендж принят (status == 0) и не истек
	Добавить продажу к соответствующему профайлу челленджа (participants[profile.id].progress += 1)
	Проверить не завершает ли эта продажа челленжд
	Если да - начислисть пользователю награду
		Закрыть челлендж для пользователя status = 2
		Проверить не обновился ли уровень пользователя
			Если да - прислать пользователю модал с информацией о новом уровне
			Прислать остальным пользователям информацию о получении пользователем нового уровня
	Если нет
		Прислать остальным пользователям учавствующим в челлендже уведомление о продаже пользователя
---------------------------------------------------------------------------------------------------------

Подробности в файле assets/js/services/dataProvider.js